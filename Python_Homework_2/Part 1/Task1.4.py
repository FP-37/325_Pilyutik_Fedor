"""
Штирлиц ехал на машине, увидел голосующего Бормана, и проехал мимо. Через некоторое время он снова увидел
голосующего Бормана, и снова проехал мимо. Вскоре он опять увидел голосующего Бормана.
 - Издевается! - подумал Борман.
 - Кольцевая! - догадался Штирлиц.

В городе N площадей. Любые две площади соединены между собой ровно одной дорогой с двусторонним движением.
В этом городе живет Штирлиц. У Штирлица есть хобби - он любит воскресным утром выйти из дома, сесть в машину,
выбрать какой-нибудь кольцевой маршрут, проходящий ровно по трем площадям (то есть сначала он едет с какой-то площади
на какую-то другую, потом - на третью, затем возвращается на начальную, и опять едет по этому маршруту). Он воображает,
что где-то на этом пути стоит Борман. И так вот ездит Штирлиц все воскресенье, пока голова не закружится, и радуется...

Естественно, что Штирлицу хочется проезжать мимо точки, в которой, как он воображает, стоит Борман, как можно чаще.
Для этого, естественно, выбранный Штирлицем маршрут должен быть как можно короче. Напишите программу, которая выберет
оптимальный для Штирлица маршрут.

Входные данные
В первой строке задается  число N (3 <= N <= 100). В последующих строках содержится матрица NxN расстояний между
площадями (число в позиции i,j обозначает длину дороги, соединяющей i-ую и j-ую площади).
Все числа в матрице (кроме стоящих на главной диагонали) - натуральные, не превышающие 1000. Матрица симметрична
относительно главной диагонали, на главной диагонали стоят 0.

Выходные данные
Требуется вывести три числа — номера площадей в оптимальном маршруте. Если маршрутов несколько, выведите любой из них.
"""
def optimal_way(N, distance_matrix):
    min_distance = float('inf')
    best_route = None
    for i in range(N):
        for j in range(N):
            if i != j:
                for k in range(N):
                    if k != i and k != j:
                        route_distance = distance_matrix[i][j] + distance_matrix[j][k] + distance_matrix[k][i]
                        if route_distance < min_distance:
                            min_distance = route_distance
                            best_route = (i + 1, j + 1, k + 1)
    return best_route
N = int(input())
distance_matrix = [list(map(int, input().split())) for _ in range(N)]
optimal_route = optimal_way(N, distance_matrix)
print(*optimal_route)