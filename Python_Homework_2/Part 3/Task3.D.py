"""
Максимальное время работы на одном тесте:	1 секунда
На стандартной шахматной доске (8х8) живут 2 шахматных коня: Красный и Зеленый.
бычно они беззаботно скачут по просторам доски, пощипывая шахматную травку, но сегодня особенный день: у Зеленого коня День Рождения. Зеленый конь решил отпраздновать это событие вместе с Красным. Но для осуществления этого прекрасного плана им нужно оказаться на одной клетке. Заметим, что Красный и Зеленый шахматные кони сильно отличаются от черного с белым: они ходят не по очереди, а одновременно, и если оказываются на одной клетке, никто никого не съедает. Сколько ходов им потребуется, чтобы насладиться праздником?

Входные данные
На вход программы поступают координаты коней, записанные по стандартным шахматным правилам
(т.е. двумя символами - маленькая латинская буква (от a до h) и цифра (от 1 до 8), задающие столбец
и строку соответственно).

Выходные данные
Требуется вывести наименьшее необходимое количество ходов, либо число -1, если кони не могут встретиться.
"""
from collections import deque

MOVES = [
    (2, 1), (2, -1), (-2, 1), (-2, -1),
    (1, 2), (1, -2), (-1, 2), (-1, -2)
]

def chess_to_index(pos):
    return ord(pos[0]) - ord('a'), 8 - int(pos[1])

def bfs_knights_meeting(start1, start2):
    x1, y1 = chess_to_index(start1)
    x2, y2 = chess_to_index(start2)

    if (x1, y1) == (x2, y2):
        return 0

    queue = deque([(x1, y1, x2, y2, 0)])
    visited = set()
    visited.add((x1, y1, x2, y2))

    while queue:
        x1, y1, x2, y2, moves = queue.popleft()

        for dx1, dy1 in MOVES:
            nx1, ny1 = x1 + dx1, y1 + dy1
            if 0 <= nx1 < 8 and 0 <= ny1 < 8:
                for dx2, dy2 in MOVES:
                    nx2, ny2 = x2 + dx2, y2 + dy2
                    if 0 <= nx2 < 8 and 0 <= ny2 < 8:
                        if (nx1, ny1) == (nx2, ny2):
                            return moves + 1
                        if (nx1, ny1, nx2, ny2) not in visited:
                            visited.add((nx1, ny1, nx2, ny2))
                            queue.append((nx1, ny1, nx2, ny2, moves + 1))

    return -1

if __name__== "__main__":
    pos1, pos2 = input().split()

    result = bfs_knights_meeting(pos1, pos2)

    print(result)