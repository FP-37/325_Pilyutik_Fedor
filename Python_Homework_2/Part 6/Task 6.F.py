"""
На складе хранятся контейнеры с товарами N различных видов. Все контейнеры составлены в N стопок.
В каждой стопке могут находиться контейнеры с товарами любых видов (стопка может быть изначально пустой).

Автопогрузчик может взять верхний контейнер из любой стопки и поставить его сверху в любую стопку.
Необходимо расставить все контейнеры с товаром первого вида в первую стопку, второго вида – во вторую стопку и т.д.

Программа должна вывести последовательность действий автопогрузчика или сообщение о том, что задача решения не имеет.

Формат входных данных

В первой строке входных данных записано одно натуральное число N, не превосходящее 500.
В следующих N строках описаны стопки контейнеров: сначала записано число ki – количество контейнеров в стопке,
а затем ki чисел – виды товара в контейнерах в данной стопке, снизу вверх. В каждой стопке вначале
не более 500 контейнеров (в процессе переноса контейнеров это ограничение может быть нарушено).

Формат выходных данных

Программа должна вывести описание действий автопогрузчика: для каждого действия напечатать
два числа – из какой стопки брать контейнер и в какую стопку класть. (Обратите внимание, что минимизировать
количество операций автопогрузчика не требуется.) Если задача не имеет решения, необходимо вывести одно число 0.
Если контейнеры изначально правильно размещены по стопкам, то  выводить ничего не нужно.
Объяснение примера. Изначально в первой стопке лежат четыре контейнера – снизу контейнер
с товаром первого вида, над ним – с товаром второго вида, над ним третьего, и сверху еще один контейнер
с товаром второго вида. Вторая и третья стопки – пусты.
"""
def rearrange_containers(N, stacks):
    actions = []
    changed = True

    while changed:
        changed = False
        for i in range(N):
            while stacks[i] and stacks[i][-1] != i + 1:
                container = stacks[i][-1]
                target_stack = container - 1
                if target_stack == i:
                    # Такой случай невозможен, так как будет бесконечный цикл
                    return [0]
                stacks[i].pop()
                stacks[target_stack].append(container)
                actions.append((i + 1, target_stack + 1))
                changed = True

    return actions


N = int(input())
stacks = []

for _ in range(N):
    data = list(map(int, input().split()))
    stacks.append(data[1:])

result = rearrange_containers(N, stacks)

if result == [0]:
    print(0)
else:
    for action in result:
        print(*action)
