"""
Глеб обожает шоппинг. Как-то раз он загорелся идеей подобрать себе кепку, майку, штаны и ботинки так, чтобы выглядеть
в них максимально стильно. В понимании Глеба стильность одежды тем больше,
чем меньше разница в цвете элементов его одежды.

В наличии имеется N1 кепок, N2 маек, N3 штанов и N4 пар ботинок (1≤N[i]≤100000).
Про каждый элемент одежды известен его цвет (целое число от 1 до 100000). Комплект одежды — это одна кепка, майка,
штаны и одна пара ботинок. Каждый комплект характеризуется максимальной разницей между любыми двумя его элементами.
Помогите Глебу выбрать максимально стильный комплект, то есть комплект с минимальной разницей цветов.

Входные данные
Для каждого типа одежды i (i=1,2,3,4) сначала вводится количество Ni элементов одежды этого типа,
далее в следующей строке — последовательность из Ni целых чисел, описывающих цвета элементов. Все четыре типа подаются
на вход последовательно, начиная с кепок и заканчивая ботинками. Все вводимые числа целые, положительные
и не превосходят 100000.

Выходные данные
Выведите четыре целых числа — цвета соответственно для кепки, майки, штанов и ботинок, которые должен выбрать Глеб
из имеющихся для того, чтобы выглядеть наиболее стильно. Если ответов несколько, выведите любой.
"""
def find_most_stylish_outfit(cp, cp_cl, sh, sh_cl, tr, tr_cl, sho, sho_cl):
    """
    Функция для нахождения наиболее стильного комплекта одежды.

    Параметры:
    cp (int) - количество кепок
    cp_cl (list) - список цветов кепок
    sh (int) - количество маек
    sh_cl (list) - список цветов маек
    tr (int) - количество штанов
    tr_cl (list) - список цветов штанов
    sho (int) - количество ботинок
    sho_cl (list) - список цветов ботинок

    Возвращает:
    tuple - четыре цвета для кепки, майки, штанов и ботинок с минимальной разницей
    """
    # Инициализируем указатели для перебора элементов в списках, минимальную разницу и другие переменные
    i, j, k, m = 0, 0, 0, 0
    min_diff = float('inf')
    best_cp, best_sh, best_tr, best_sho = 0, 0, 0, 0

    # Основной цикл, который продолжается, пока все указатели не вышли за пределы своих списков
    while i < cp and j < sh and k < tr and m < sho:
        # Собираем текущие цвета кепки, майки, штанов и ботинок в список
        colors = [cp_cl[i], sh_cl[j], tr_cl[k], sho_cl[m]]

        # Находим минимальный и максимальный цвета в списке
        min_cl = min(colors)
        max_cl = max(colors)

        # Вычисляем разницу между максимальным и минимальным цветами
        diff = max_cl - min_cl

        # Если текущая разница меньше минимальной, обновляем минимальную разницу и лучшие цвета
        if diff < min_diff:
            min_diff = diff
            best_cp, best_sh, best_tr, best_sho = cp_cl[i], sh_cl[j], tr_cl[k], sho_cl[m]

        # Если минимальный цвет - это цвет объекта, увеличиваем указатель на это значение
        if min_cl == cp_cl[i]:
            i += 1
        elif min_cl == sh_cl[j]:
            j += 1
        elif min_cl == tr_cl[k]:
            k += 1
        else:
            m += 1

    # Возвращаем лучшие цвета для кепки, майки, штанов и ботинок
    return best_cp, best_sh, best_tr, best_sho

def main():
    caps = int(input().strip())
    cp_colors = list(map(int, input().strip().split()))

    shirts = int(input().strip())
    sh_colors = list(map(int, input().strip().split()))

    trousers = int(input().strip())
    tr_colors = list(map(int, input().strip().split()))

    shouse = int(input().strip())
    sho_colors = list(map(int, input().strip().split()))

    print(*find_most_stylish_outfit(caps, cp_colors, shirts, sh_colors, trousers, tr_colors, shouse, sho_colors))

if __name__=="__main__":
    main()