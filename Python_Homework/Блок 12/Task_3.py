"""
В этой задаче Вам требуется найти максимальную по длине подстроку данной строки,
такую что каждый символ встречается в ней не более k раз.

Входные данные

В первой строке даны два целых числа n и k (1≤n≤100000, 1≤k≤n), где n – количество символов в строке.
Во второй строке n символов – данная строка, состоящая только из строчных латинских букв.

Выходные данные

В выходной файл выведите два числа – длину искомой подстроки и номер её первого символа.
Если решений несколько, выведите любое.
"""
def find_substring(s, k):
    n, k = len(s), int(k)

    # Инициализация двух указателей и словаря для подсчета символов
    left, right = 0, 0
    count = {}
    max_length = 0
    start = 0

    # Проходим по строке
    while right < n:
        # Увеличиваем правый указатель
        right += 1

        # Обновляем счетчик символов
        if s[right - 1] in count:
            count[s[right - 1]] += 1
        else:
            count[s[right - 1]] = 1

        # Проверяем, не превышает ли количество вхождений символа k
        while count[s[right - 1]] > k:
            if s[left] in count:
                count[s[left]] -= 1
            left += 1

        # Если символ слева уже не превышает k, обновляем длину подстроки
        if right - left > max_length:
            max_length = right - left
            start = left

    # Возвращаем длину подстроки и ее начальный индекс
    return max_length, start+1

def main():
    n, k = map(int, input().strip().split())
    s = input()
    result = find_substring(s, k)
    print(*result)

if __name__ == "__main__":
    main()