"""
На региональном этапе Всероссийской олимпиады школьников по информатике 23 января 2011 года
предлагалась следующая задача.

Победитель школьного этапа олимпиады по информатике нашел дома в старых бумагах результаты
чемпионата страны по стрельбе из лука, в котором участвовал его папа.
К сожалению, листок с результатами сильно пострадал от времени, и разобрать фамилии участников было невозможно.
Остались только набранные каждым участником очки, причем расположились они в том порядке,
в котором участники чемпионата выполняли стрельбу.

Расспросив папу, школьник выяснил, что количество очков, которое набрал папа, заканчивается на 5
, один из победителей чемпионата стрелял раньше папы, а папин друг, который стрелял сразу после папы,
набрал меньше очков. Теперь он заинтересовался,какое самое высокое место мог занять его папа на том чемпионате.

Будем считать, что участник соревнования занял k-е место, если ровно k−1 участников чемпионата набрали
строго больше очков, чем он. При этом победителями считались все участники чемпионата, занявшие первое место.

Требуется написать программу, которая по заданным результатам чемпионата определяет,
какое самое высокое место на чемпионате мог занять папа победителя школьного этапа олимпиады по информатике.

Входные данные
Программа получает на вход целое число n — количество участников чемпионата страны по стрельбе (3≤n≤10^5).
Далее идет n положительных целых чисел, каждое из которых не превышает 1000, — очки участников чемпионата,
приведенные в том порядке, в котором они выполняли стрельбу.

Выходные данные
Выведите одно целое число — самое высокое место, которое мог занять папа школьника
Если не существует ни одного участника чемпионата, который удовлетворяет описанным выше условиям,
выведите в выходной файл число 0.

Примечание

Сложность работы программы должна быть O(n). Использование встроенной сортировки(sort, sorted),
алгоритмов сортировки пузырёк/quick sort/merge sort и других запрещено!
"""
def solve(n, scores):
    father_scores = [score for score in scores if score % 10 == 5]
    if not father_scores:
        print(0)
        return
    max_rank = 0
    for father_score_index in [i for i, x in enumerate(scores) if x % 10 == 5]:
        father_score = scores[father_score_index]
        higher_before = False
        lower_after = False
        for i in range(father_score_index):
            if scores[i] > father_score:
                higher_before = True
                break
        if father_score_index + 1 < n:
            if scores[father_score_index + 1] < father_score:
                lower_after = True
        if higher_before and lower_after:
            count = [0] * 1001
            for score in scores:
                count[score] += 1
            rank = 1
            for i in range(1000, father_score, -1):
                rank += count[i]
            max_rank = max(max_rank, rank)
    if max_rank > 0:
        return max_rank
    else:
        return 0

def main():
    n = int(input().strip())
    scores = list(map(int, input().strip().split()))
    print(solve(n,scores))

if __name__ == "__main__":
    main()