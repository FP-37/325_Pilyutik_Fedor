"""
Дан массив из N различных натуральных чисел от 1 до N. Сортировка массива по возрастанию "пузырьком"
работает следующим образом. Сначала сравниваются первый и второй элемент, и, если первый больше второго,
то они меняются местами. Затем та же процедура производится со вторым и третьим элементом, …,
с предпоследним и последним. Затем эта процедура снова повторяется с первым и вторым, со вторым и третьим, …,
с предпоследним и последним элементами. И так (N – 1) раз.

Сортировка «с конфеткой» выполняется по тем же правилам, но дополнительно задан список пар чисел,
которые не меняются друг с другом ни при каких условиях (в таком случае сортирующий получает конфетку за то,
что пропускает соответствующий обмен). Например, наличие в списке пары (4,1) обозначает, что если в какой-то момент
рядом окажутся числа 4 и 1 или 1 и 4, и по алгоритму сортировки их нужно будет поменять местами,
то обмена не произойдет, а сортирующий получит конфетку.

Требуется провести сортировку «с конфеткой» данного массива и выдать результат сортировки.

Входные данные
Сначала вводится число N — количество чисел в массиве, затем N чисел — элементы массива.
Далее задается число M — количество пар чисел, за которые дают конфетку, а затем M пар чисел.
Если в списке есть пара (i,j), то и за пару (j,i) также дают конфетку.

1 ≤ N ≤ 5000, 0 ≤ M ≤ 10000.
"""
def main():
    # Считать количество элементов массива
    N = int(input().strip())

    # Считать элементы массива
    arr = list(map(int, input().strip().split()))

    # Считать количество пар, за которые дают конфетку
    M = int(input().strip())

    # Считать такие пары
    pairs = set()
    for _ in range(M):
        x, y = map(int, input().strip().split())
        pairs.add((x, y))
        pairs.add((y, x))

    # Выполнить сортировку
    for i in range(N):
        for j in range(0, N-i-1):
            if arr[j] > arr[j + 1] and (arr[j], arr[j + 1]) not in pairs:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

    # Вывести отсортированный массив
    print(*arr)

if __name__ == "__main__":
    main()